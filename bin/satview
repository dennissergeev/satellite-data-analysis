#!python
# -*- coding: utf-8 -*-
"""
Satellite imagery viewer in Python

http://dennissergeev.github.io/satellite-imagery-viewer-in-python.html
"""
from __future__ import print_function, division
import argparse
import datetime
import glob
import matplotlib.pyplot as plt
from matplotlib.widgets import Cursor
from mpl_toolkits.basemap import Basemap
import numpy as np
import os

from sattools.avhrr import read_gtiff

DESCR = """
Open satellite image geotiff file, mark some locations and write their coordinates to text file.
"""

def_out_fname = 'pmc_loc_time_ch4_20Mar-02Apr.txt'
parser = argparse.ArgumentParser(os.path.basename(__file__),
                                 description=DESCR,
                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("-f", "--input_file", nargs='?', required=True, help="File name(s)")
parser.add_argument("--sort_fnames", type=bool, default=True, help="Sort input file names list")
parser.add_argument("-id", "--track_id", type=int, required=True, help="Track id (e.g. id of a cyclone)")
parser.add_argument("-o", "--output_file", type=str, default=def_out_fname, help="Name of text file where to write coordinates")

parser.add_argument("--lonmin", type=float, default=-20., help="longitude of lower left hand corner of the desired map domain (degrees)")
parser.add_argument("--lonmax", type=float, default=40., help="longitude of upper right hand corner of the desired map domain (degrees).")
parser.add_argument("--latmin", type=float, default=65., help="latitude of lower left hand corner of the desired map domain (degrees).")
parser.add_argument("--latmax", type=float, default=82., help="latitude of upper right hand corner of the desired map domain (degrees).")

def figview(print2file=False,outdir=os.curdir, \
            imgname='test_image',imgform='png',imgres=500, \
            maxfig=False, tight=False):
    if tight:
        plt.tight_layout(pad=2)
    if print2file:
        imgname = os.path.join(outdir,imgname+'.'+imgform)
        checkdir(outdir)
        print('Saved as ' + imgname)
        plt.savefig(imgname,dpi=imgres)
        plt.close()
    else:
        if maxfig:
            mpl_backend = plt.get_backend()
            figManager = plt.get_current_fig_manager()
            if   mpl_backend == 'Qt4Agg':
                figManager.window.showMaximized()
            elif mpl_backend == 'TkAgg':
                figManager.window.state('zoomed')
            elif mpl_backend == 'wxAgg':
                figManager.frame.Maximize(True)
            else:
                print("Cannot maximize for: "+mpl_backend)
        plt.show()

class SatView(object):
    def __init__(self, file_names, out_file_name=''):
        self.file_names = file_names
        if out_file_name == '':
            self.out_file_name = 'pmc_loc_time_' + \
            os.path.basename(self.file_names[0]).split('.')[1] + '_' + \
            os.path.basename(self.file_names[0]).split('.')[0] + '-' + \
            os.path.basename(self.file_names[-1]).split('.')[0]+'.txt'
        else:
            self.out_file_name = out_file_name
        self.ind = 0
        self.track = []
        self.lonlist = []
        self.latlist = []

    def __call__(self,_id,lon1=-180.,lon2=180.,lat1=-90.,lat2=90.,proj='mill',tick_incr=[1,1]):
        self._id = _id
        self.fig, self.ax = plt.subplots()

        self.bm = Basemap(projection='lcc',\
                 llcrnrlon=lon1,llcrnrlat=lat1,urcrnrlon=lon2,urcrnrlat=lat2,\
                 lat_1=lat1+2./3*(lat2-lat1), lat_2=lat2, lon_0=0.5*(lon1+lon2),\
                 resolution='l')
        
        ticklon = np.array(tick_incr)[0]
        try:
            ticklat = np.array(tick_incr)[1]
        except IndexError:
            ticklat = ticklon

        #self.bm.drawmeridians(np.arange(round(lon1),lon2,ticklon),labels=[0,0,0,1],color='c')
        #self.bm.drawparallels(np.arange(round(lat1),lat2,ticklat),labels=[1,0,0,0],color='c') # Bug in drawparallels function
        self.bm.drawcoastlines(color='y')

        self.get_data() # get lons, lats, arr
        self.plot_data()
        self.fig.canvas.mpl_connect('button_press_event',self.on_click)
        self.cursor = Cursor(plt.gca(), useblit=True, color='red')

        _figview(False,maxfig=True)

    def on_click(self, event):
        if event.inaxes == self.ax:
        # Get nearest data
        #xpos = np.argmin(np.abs(event.xdata - self.x))
        #ypos = np.argmin(np.abs(event.ydata - self.y))

            if event.button == 1: # Left button
                # Convert (x, y) to (lon, lat) using Basemap
                ilon, ilat = self.bm(event.xdata, event.ydata,inverse=True)
                # Append coordinates to the lists
                self.lonlist.append(ilon)
                self.latlist.append(ilat)
                # Add a marker on the clicked spot
                self.markers.append(self.bm.plot(event.xdata,event.ydata,marker='o',mfc='r',mec='r',ms=10))
                plt.draw()
                # Write coordinates to text file
                self.write_xy()
        
            if event.button == 3: # Right button
                # Store data from the current frame
                self.track.append(dict(_id=self._id,time=self.time_raw,lon=self.lonlist,lat=self.latlist))
                # Next frame
                self.ind += 1
                if self.ind < len(self.file_names):
                    self.pcolm.remove()
                    # Clear lon/lat lists
                    self.lonlist = []
                    self.latlist = []
                    # Clear the plot from the markers
                    if hasattr(self,'markers'):
                        for ms in self.markers:
                            self.ax.lines.remove(ms[0])
                    #    for ms in self.markers:
                    #        print(ms)
                    #        ms.lines = []
                    # Read data for the next frame and plot it
                    self.get_data() # get lons, lats, arr
                    self.plot_data()
                    plt.draw()
                else:
                    print('Reached the end of the file list')
                    plt.close()

    def write_xy(self):
        outf = open(self.out_file_name,'a')
        outf.write(str(self._id)+\
        '\t'+self.time_raw+'\t'+'{0:.3f}\t{1:.3f}\n'.format(self.lonlist[-1],self.latlist[-1]))
        outf.close()

    def plot_data(self):
        xx, yy = self.bm(self.lons,self.lats)
        self.pcolm = self.bm.pcolormesh(xx,yy,self.arr,cmap=plt.get_cmap('gray'),alpha=1.)
        plt.title(self.time_string)
        self.markers = []

    def get_data(self):
        print('Reading: '+self.file_names[self.ind])
        self.get_time_str()
        self.lons, self.lats, self.arr = read_gtiff(self.file_names[self.ind])

    def get_time_str(self):
        # Get file name from the path and parse it assuming '.' is a delimiter
        cur_file_name = os.path.basename(self.file_names[self.ind]).split('.')
        self.channel = cur_file_name[1]
        # Assume that the file name base consists of date and time
        cur_date_time = datetime.datetime.strptime(cur_file_name[0], '%Y%m%d%H%M')
        self.time_string = cur_date_time.strftime("%H:%M, %d %B %Y")
        self.time_raw = cur_file_name[0]

if __name__ == '__main__':
    args = parser.parse_args()

    file_name_sat = glob.glob(args.input_fname)
    if args.sort_fnames:
         file_name_sat = sorted(file_name_sat)

    SatView(file_name_sat, args.output_file)(args.track_id, args.lonmin, args.lonmax, args.latmin, args.latmax)
